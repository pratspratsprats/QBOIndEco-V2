/**
 * @author generated by bgopinath
 */
package com.intuit.qbo.ecommerce.krc.api.resource;

import org.dozer.Mapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.gson.JsonObject;
import com.intuit.qbo.ecommerce.ius.IUSClient;
import com.intuit.qbo.ecommerce.krc.InternalServerError;
import com.intuit.qbo.ecommerce.krc.ValidationException;
import com.intuit.qbo.ecommerce.krc.api.dao.CustomerDAO;
import com.intuit.qbo.ecommerce.krc.api.dto.CustomerDO;
import com.intuit.qbo.ecommerce.krc.constants.Constants;
import com.intuit.qbo.ecommerce.krc.model.Customer;
import com.intuit.qbo.ecommerce.krc.synch.KRCMapper;

@Component
public class CustomerResourceImpl implements CustomerResource {

	private static final Logger LOG = LoggerFactory.getLogger(CustomerResourceImpl.class);
	private static final String HTTP = "http://";

	@Autowired
	private Mapper mapper;

	@Autowired
	private CustomerDAO customerDAO;

	public Customer post(Customer customer) {
		validateRequest(customer);

		try {
			String domain = customer.getShopDomain();
			if (!domain.startsWith(HTTP)) {
				customer.setShopDomain(HTTP + domain);
			}

			// check for customer in db
			CustomerDO customerDO = customerDAO
					.selectCustomerByShopDomain(customer.getShopDomain());

			if (customerDO != null) {
				updateCustomerData(customer, customerDO);
				customerDAO.update(customerDO);
			} else {
				// in case the customer in not found in db, update the DB
				customerDO = new CustomerDO();
				mapper.map(customer, customerDO);
				customerDAO.insert(customerDO);
			}

//			boolean isToBeSynced = customerDO.getSyncStatus();
//
//			// Don't let the scheduler run if QB credentials are not present
//			if (isToBeSynced && customerDO.getQbUserName() != null
//					&& customerDO.getQbPassword() != null && customerDO.getQbCompanyId() != null
//					&& !customerDO.getQbUserName().isEmpty()
//					&& !customerDO.getQbPassword().isEmpty()
//					&& !customerDO.getQbCompanyId().isEmpty()) {
//				IUSClient iusClient = new IUSClient();
//
//				LOG.info("Qbo user ::::: " + customerDO.getQbUserName());
//				LOG.info("Qbo password ::::: " + customerDO.getQbPassword());
//				LOG.info("Qbo company id ::::: " + customerDO.getQbCompanyId());
//
//				JsonObject qboUser = iusClient.login(customerDO.getQbUserName(),
//						customerDO.getQbPassword());
//
//				if (qboUser != null) {
//
//					String ticket = qboUser.get("ticket").getAsString();
//					String authId = qboUser.get("userId").getAsString();
//
//					KRCMapper krcMapper = new KRCMapper();
//					krcMapper.syncKRData(customerDO.getShopDomain(), customerDO.getWebApiKey(),
//							ticket, authId, Constants.APP_TOKEN, customerDO.getQbCompanyId(),
//							customerDO.getLastOrderSyncDate(), customerDO.getLastProductSyncDate());
//				}
//			} else {
//				LOG.info("Either Data sync is disbaled for customer or QB credentials are not present in DB : "
//						+ customerDO);
//			}
		} catch (Exception e) {
			LOG.error("Some error occured while processing of customer : " + customer, e);
			throw new InternalServerError(
					"Some internal server error occured. Please try again after some time or contact server admin.");
		}

		return customer;
	}

	private void updateCustomerData(Customer customer, CustomerDO customerDO) {
		// don't update shop domain, id and create date
		customerDO.setWebApiKey(customer.getWebApiKey());
		customerDO.setSyncStatus(customer.getSyncStatus());
		customerDO.setEmail(customer.getEmail());
		customerDO.setCompanyName(customer.getCompanyName());
		customerDO.setFirstName(customer.getFirstName());
		customerDO.setLastName(customer.getLastName());
		customerDO.setAddress1(customer.getAddress1());
		customerDO.setAddress2(customer.getAddress2());
		customerDO.setCity(customer.getCity());
		customerDO.setState(customer.getState());
		customerDO.setPostCode(customer.getPostCode());
		customerDO.setCountry(customer.getCountry());
		customerDO.setTinNo(customer.getTinNo());
		customerDO.setMobile(customer.getMobile());
		// update only if not null values comes from request.
		if (customer.getQbUserName() != null && !customer.getQbUserName().isEmpty()) {
			customerDO.setQbUserName(customer.getQbUserName());
		}

		if (customer.getQbPassword() != null && !customer.getQbPassword().isEmpty()) {
			customerDO.setQbPassword(customer.getQbPassword());
		}

		if (customer.getQbCompanyId() != null && !customer.getQbCompanyId().isEmpty()) {
			customerDO.setQbCompanyId(customer.getQbCompanyId());
		}
	}

	private void validateRequest(Customer customer) {
		if (customer == null) {
			throw new ValidationException("Request Body cannot be empty or null.");
		}

		if (customer.getShopDomain() == null || customer.getShopDomain().isEmpty()) {
			throw new ValidationException("Customer's Shop Domain cannot be empty or null.");
		}

		if (customer.getWebApiKey() == null || customer.getWebApiKey().isEmpty()) {
			throw new ValidationException("Customer's Web Api Key cannot be empty or null.");
		}

		if (customer.getSyncStatus() == null) {
			throw new ValidationException("Sync status cannot be null.");
		}
	}
}
