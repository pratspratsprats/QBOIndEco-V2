package com.intuit.qbo.ecommerce.krc.api.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.intuit.qbo.ecommerce.krc.api.dto.CustomerDO;

/**
 * @author generated by Vijayan Srinivasan
 * @since Thu Oct 09 19:08:56 IST 2014
 */
@Repository
public class CustomerDAO extends BaseDAO {

	public CustomerDO insert(final CustomerDO entity) {
		final String sql = "insert into customers (email,web_api_key,company_name,first_name,last_name,address1,address2,"
				+ "city,post_code,country,tin_no,mobile,qb_password, shop_domain,qb_username,state,sync_status,qb_company_id,created_dt,last_order_sync_dt, access_token,access_token_secret, access_token_expiration_date) "
				+ "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		
		KeyHolder keyHolder = new GeneratedKeyHolder();
		PreparedStatementCreator psc = new PreparedStatementCreator() {
			public PreparedStatement createPreparedStatement(Connection connection)
					throws SQLException {
				Calendar cal = Calendar.getInstance();
				cal.add(Calendar.DATE, -7);
				Date syncDate = cal.getTime();
				PreparedStatement ps = connection.prepareStatement(sql, new String[] { "id" });
				ps.setObject(0 + 1, entity.getEmail());
				ps.setObject(1 + 1, entity.getWebApiKey());
				ps.setObject(2 + 1, entity.getCompanyName());
				ps.setObject(3 + 1, entity.getFirstName());
				ps.setObject(4 + 1, entity.getLastName());
				ps.setObject(5 + 1, entity.getAddress1());
				ps.setObject(6 + 1, entity.getAddress2());
				ps.setObject(7 + 1, entity.getCity());
				ps.setObject(8 + 1, entity.getPostCode());
				ps.setObject(9 + 1, entity.getCountry());
				ps.setObject(10 + 1, entity.getTinNo());
				ps.setObject(11 + 1, entity.getMobile());
				ps.setObject(12 + 1, entity.getQbPassword());
				ps.setObject(13 + 1, entity.getShopDomain());
				ps.setObject(14 + 1, entity.getQbUserName());
				ps.setObject(15 + 1, entity.getState());
				ps.setObject(16 + 1, entity.getSyncStatus());
				ps.setObject(17 + 1, entity.getQbCompanyId());
				ps.setObject(18 + 1, new Date());
				ps.setObject(19 + 1, syncDate);
				ps.setObject(20 + 1, entity.getAccessToken());
				ps.setObject(21 + 1, entity.getAccessTokenSecret());
				ps.setObject(22 + 1, new Date());
				

				return ps;
			}
		};
		jdbcTemplate.update(psc, keyHolder);
		entity.setId(new Integer(keyHolder.getKey().toString()));
		return entity;
	}

	public CustomerDO update(CustomerDO entity) {
		String sql = "update customers set " + "  email = ? ,  " + "  web_api_key = ? ,  "
				+ "  company_name = ? ,  " + "  first_name = ? ,  " + "  last_name = ? ,  "
				+ "  address1 = ? ,  " + "  address2 = ? ,  " + "  city = ? ,  "
				+ "  post_code = ? ,  " + "  country = ? ,  " + "  tin_no = ? ,  "
				+ "  mobile = ? ,  " + "  qb_password = ? ,  " + "  sync_status = ? ,  "
				+ "  qb_username = ?,  " + "  qb_company_id = ?,  " + "  state = ? , "+"  access_token = ? ,  "+"  access_token_secret = ? ,  "+"  access_token_expiration_date = ?  ,  "+" sync_frequency = ? ,  "+" sync_start_delay=?"
				+ " where id=?";
		
		jdbcTemplate.update(sql, entity.getEmail(), entity.getWebApiKey(), entity.getCompanyName(),
				entity.getFirstName(), entity.getLastName(), entity.getAddress1(),
				entity.getAddress2(), entity.getCity(), entity.getPostCode(), entity.getCountry(),
				entity.getTinNo(), entity.getMobile(), entity.getQbPassword(),
				entity.getSyncStatus(), entity.getQbUserName(), entity.getQbCompanyId(),
				entity.getState(),entity.getAccessToken(), entity.getAccessTokenSecret(), entity.getAccessTokenExpirationDate(),entity.getSyncFrequency(),entity.getSyncStatrDelay(),entity.getId());
		return entity;
	}
	
	public void updateLastOrderSyncDate(Date date, Integer id) {
		String sql = "update customers set " + "  last_order_sync_dt = ? "
				+ " where id = ?";
		jdbcTemplate.update(sql, date, id);
	}
	
	public void updateLastProductSyncDate(Date date, Integer id) {
		String sql = "update customers set " + "  last_product_sync_dt = ? "
				+ " where id = ?";
		jdbcTemplate.update(sql, date, id);
	}

	public CustomerDO selectById(Integer id) {
		String sql = "select * from customers where id = ?";
		CustomerDO entity;

		try {
			entity = this.jdbcTemplate.queryForObject(sql, new CustomerRowMapper(), id);
		} catch (EmptyResultDataAccessException e) {
			entity = null;
		}

		return entity;
	}

	public boolean exists(Integer id) {
		String sql = "select count(*) from customers where id=?";
		int count = this.jdbcTemplate.queryForObject(sql, Integer.class, id);
		return count > 0;
	}

	
	// Getting all Customer Object from the DB
	public List<CustomerDO> selectAll() {
		String sql = "select * from customers";
		return this.jdbcTemplate.query(sql, new CustomerRowMapper());
	}

	public long count() {
		String sql = "select count(*) from customers";
		return this.jdbcTemplate.queryForObject(sql, Integer.class);
	}

	public void deleteById(Integer id) {
		String sql = "delete from customers where id=?";
		jdbcTemplate.update(sql, id);
	}

	public void deleteAll() {
		String sql = "delete from customers";
		jdbcTemplate.update(sql);
	}

	public CustomerDO selectByEmail(String email) {
		String sql = "select * from customers where email=?";
		CustomerDO entity;

		try {
			entity = this.jdbcTemplate.queryForObject(sql, new CustomerRowMapper(), email);
		} catch (EmptyResultDataAccessException e) {
			entity = null;
		}

		return entity;
	}

	public List<CustomerDO> selectCustomersToSync() {
		String sql = "SELECT * FROM customers where sync_status=true";
		return this.jdbcTemplate.query(sql, new CustomerRowMapper());

	}

	public CustomerDO selectCustomerByShopDomain(String shopDomain) {
		String sql = "select * from customers where shop_domain = ?";
		CustomerDO entity;

		try {
			entity = this.jdbcTemplate.queryForObject(sql, new CustomerRowMapper(), shopDomain);
		} catch (EmptyResultDataAccessException e) {
			entity = null;
		}

		return entity;
	}
	
	// Select Customer By CompanyId
	public CustomerDO selectCustomerByCompanyId(String companyId) {
		String sql = "select * from customers where qb_company_id = ?";
		CustomerDO entity;

		try {
			entity = this.jdbcTemplate.queryForObject(sql, new CustomerRowMapper(), companyId);
		} catch (EmptyResultDataAccessException e) {
			entity = null;
		}

		return entity;
	}

	private class CustomerRowMapper implements RowMapper<CustomerDO> {
		public CustomerDO mapRow(ResultSet rs, int rowNum) throws SQLException {
			CustomerDO customer = new CustomerDO();
			customer.setId(rs.getInt("id"));
			customer.setEmail(rs.getString("email"));
			customer.setWebApiKey(rs.getString("web_api_key"));
			customer.setShopDomain(rs.getString("shop_domain"));
			customer.setCompanyName(rs.getString("company_name"));
			customer.setFirstName(rs.getString("first_name"));
			customer.setLastName(rs.getString("last_name"));
			customer.setAddress1(rs.getString("address1"));
			customer.setAddress2(rs.getString("address2"));
			customer.setState(rs.getString("state"));
			customer.setCity(rs.getString("city"));
			customer.setPostCode(rs.getString("post_code"));
			customer.setCountry(rs.getString("country"));
			customer.setTinNo(rs.getString("tin_no"));
			customer.setMobile(rs.getString("mobile"));
			customer.setSyncStatus(rs.getBoolean("sync_status"));
			customer.setQbCompanyId(rs.getString("qb_company_id"));
			customer.setQbUserName(rs.getString("qb_username"));
			customer.setQbPassword(rs.getString("qb_password"));
			customer.setCreatedDt(rs.getDate("created_dt"));
			customer.setUpdatedDt(rs.getDate("updated_dt"));
			customer.setLastOrderSyncDate(rs.getDate("last_order_sync_dt"));
			customer.setLastProductSyncDate(rs.getDate("last_product_sync_dt"));
			customer.setAccessToken(rs.getString("access_token"));
			customer.setAccessTokenSecret(rs.getString("access_token_secret"));
			customer.setAccessTokenExpirationDate(rs.getDate("access_token_expiration_date"));
			customer.setSyncFrequency(rs.getLong("sync_frequency"));
			customer.setSyncStatrDelay(rs.getLong("sync_start_delay"));
			return customer;
		}
	}

}
